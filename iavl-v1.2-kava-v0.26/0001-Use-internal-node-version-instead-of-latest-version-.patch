From b238f55b0bb79dc3c2a874199b3f6fc4f2ed9b6e Mon Sep 17 00:00:00 2001
From: drklee3 <derrick@dlee.dev>
Date: Wed, 24 Apr 2024 13:15:43 -0700
Subject: [PATCH] Use internal node version instead of latest version for
 computing hashes

---
 mutable_tree.go      | 12 ++++++++----
 mutable_tree_test.go | 25 ++++++++++++++++++++-----
 2 files changed, 28 insertions(+), 9 deletions(-)

diff --git a/mutable_tree.go b/mutable_tree.go
index 4ce47c9..2c856f0 100644
--- a/mutable_tree.go
+++ b/mutable_tree.go
@@ -761,7 +761,7 @@ func (tree *MutableTree) SaveVersion() ([]byte, int64, error) {
 				}
 			}
 		} else {
-			if err := tree.saveNewNodes(version); err != nil {
+			if err := tree.saveNewNodes(); err != nil {
 				return nil, 0, err
 			}
 		}
@@ -1015,7 +1015,7 @@ func (tree *MutableTree) balance(node *Node) (newSelf *Node, err error) {
 // saveNewNodes save new created nodes by the changes of the working tree.
 // NOTE: This function clears leftNode/rigthNode recursively and
 // calls _hash() on the given node.
-func (tree *MutableTree) saveNewNodes(version int64) error {
+func (tree *MutableTree) saveNewNodes() error {
 	nonce := uint32(0)
 	newNodes := make([]*Node, 0)
 	var recursiveAssignKey func(*Node) ([]byte, error)
@@ -1025,7 +1025,9 @@ func (tree *MutableTree) saveNewNodes(version int64) error {
 		}
 		nonce++
 		node.nodeKey = &NodeKey{
-			version: version,
+			// Use the legacy version number for the first version, instead of
+			// initialVersion, to ensure that the first version is always 1.
+			version: tree.version + 1,
 			nonce:   nonce,
 		}
 
@@ -1042,7 +1044,9 @@ func (tree *MutableTree) saveNewNodes(version int64) error {
 			}
 		}
 
-		node._hash(version)
+		// Use legacy version number to preserve hash compatibility with old
+		// versions.
+		node._hash(tree.version + 1)
 		newNodes = append(newNodes, node)
 
 		return node.nodeKey.GetKey(), nil
diff --git a/mutable_tree_test.go b/mutable_tree_test.go
index 588b1dc..26628c6 100644
--- a/mutable_tree_test.go
+++ b/mutable_tree_test.go
@@ -1411,7 +1411,7 @@ func TestMutableTree_InitialVersion_FirstVersion(t *testing.T) {
 	db := dbm.NewMemDB()
 
 	initialVersion := int64(1000)
-	tree := NewMutableTree(db, 0, true, log.NewNopLogger(), InitialVersionOption(uint64(initialVersion)))
+	tree := NewMutableTree(db, 0, false, log.NewNopLogger(), InitialVersionOption(uint64(initialVersion)))
 
 	_, err := tree.Set([]byte("hello"), []byte("world"))
 	require.NoError(t, err)
@@ -1419,23 +1419,38 @@ func TestMutableTree_InitialVersion_FirstVersion(t *testing.T) {
 	_, version, err := tree.SaveVersion()
 	require.NoError(t, err)
 	require.Equal(t, initialVersion, version)
-	rootKey := GetRootKey(version)
+
 	// the nodes created at the first version are not assigned with the `InitialVersion`
+	rootKey := GetRootKey(1)
 	node, err := tree.ndb.GetNode(rootKey)
 	require.NoError(t, err)
-	require.Equal(t, initialVersion, node.nodeKey.version)
+	require.Equal(t, int64(1), node.nodeKey.version, "new nodes on new tree should be version 1")
+
+	// Check fast node version
+	fastNode, err := tree.ndb.GetFastNode([]byte("hello"))
+	require.NoError(t, err)
+	require.Equal(t, int64(1), fastNode.GetVersionLastUpdatedAt(), "fast nodes be version 1")
+
+	// ------------------------------
+	// Writes on existing tree
 
 	_, err = tree.Set([]byte("hello"), []byte("world1"))
 	require.NoError(t, err)
 
 	_, version, err = tree.SaveVersion()
 	require.NoError(t, err)
-	require.Equal(t, initialVersion+1, version)
+	require.Equal(t, initialVersion+1, version, "new version should be initialVersion+1")
+
 	rootKey = GetRootKey(version)
 	// the following versions behaves normally
 	node, err = tree.ndb.GetNode(rootKey)
 	require.NoError(t, err)
-	require.Equal(t, initialVersion+1, node.nodeKey.version)
+	require.Equal(t, initialVersion+1, node.nodeKey.version, "new nodes on existing tree should use initialVersion")
+
+	// Check fast node version
+	fastNode, err = tree.ndb.GetFastNode([]byte("hello"))
+	require.NoError(t, err)
+	require.Equal(t, initialVersion+1, fastNode.GetVersionLastUpdatedAt(), "fast nodes should have the same version as the tree")
 }
 
 func TestMutableTreeClose(t *testing.T) {
-- 
2.39.3 (Apple Git-146)

