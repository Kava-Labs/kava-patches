From b42b5476719524723156331bc6b72c9c9c6bcb6b Mon Sep 17 00:00:00 2001
From: Ruaridh <rhuairahrighairidh@users.noreply.github.com>
Date: Wed, 4 May 2022 14:13:51 +0100
Subject: [PATCH 1/4] fix(server/cmd)!: set environment prefix (#10950) (#113)

Add `envPrefix` parameter to server's `cmd.Execute` method allowing chains to set custom `envPrefix`.

---

*All items are required. Please add a note to the item if the item is not applicable and
please add links to any relevant follow up issues.*

I have...

- [x] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title
- [x] added `!` to the type prefix if API or client breaking change
- [x] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/master/CONTRIBUTING.md#pr-targeting))
- [ ] provided a link to the relevant issue or specification
- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/master/docs/building-modules)
- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/master/CONTRIBUTING.md#testing)
- [x] added a changelog entry to `CHANGELOG.md`
- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)
- [ ] updated the relevant documentation or specification
- [x] reviewed "Files changed" and left comments if necessary
- [x] confirmed all CI checks have passed

*All items are required. Please add a note if the item is not applicable and please add
your handle next to the items reviewed if you only reviewed selected items.*

I have...

- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title
- [ ] confirmed `!` in the type prefix if API or client breaking change
- [ ] confirmed all author checklist items have been addressed
- [ ] reviewed state machine logic
- [ ] reviewed API design and naming
- [ ] reviewed documentation is accurate
- [ ] reviewed tests and test coverage
- [ ] manually tested (if applicable)

Co-authored-by: Ryan Christoffersen <12519942+ryanchristo@users.noreply.github.com>
---
 server/cmd/execute.go       | 4 ++--
 simapp/simd/cmd/cmd_test.go | 2 +-
 simapp/simd/main.go         | 2 +-
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/server/cmd/execute.go b/server/cmd/execute.go
index 83e9bc0b2..38e08797a 100644
--- a/server/cmd/execute.go
+++ b/server/cmd/execute.go
@@ -17,7 +17,7 @@ import (
 // server context object with the appropriate server and client objects injected
 // into the underlying stdlib Context. It also handles adding core CLI flags,
 // specifically the logging flags. It returns an error upon execution failure.
-func Execute(rootCmd *cobra.Command, defaultHome string) error {
+func Execute(rootCmd *cobra.Command, envPrefix string, defaultHome string) error {
 	// Create and set a client.Context on the command's Context. During the pre-run
 	// of the root command, a default initialized client.Context is provided to
 	// seed child command execution with values such as AccountRetriver, Keyring,
@@ -32,6 +32,6 @@ func Execute(rootCmd *cobra.Command, defaultHome string) error {
 	rootCmd.PersistentFlags().String(flags.FlagLogLevel, zerolog.InfoLevel.String(), "The logging level (trace|debug|info|warn|error|fatal|panic)")
 	rootCmd.PersistentFlags().String(flags.FlagLogFormat, tmcfg.LogFormatPlain, "The logging format (json|plain)")
 
-	executor := tmcli.PrepareBaseCmd(rootCmd, "", defaultHome)
+	executor := tmcli.PrepareBaseCmd(rootCmd, envPrefix, defaultHome)
 	return executor.ExecuteContext(ctx)
 }
diff --git a/simapp/simd/cmd/cmd_test.go b/simapp/simd/cmd/cmd_test.go
index 1a9183d33..0e2a291e9 100644
--- a/simapp/simd/cmd/cmd_test.go
+++ b/simapp/simd/cmd/cmd_test.go
@@ -20,5 +20,5 @@ func TestInitCmd(t *testing.T) {
 		fmt.Sprintf("--%s=%s", cli.FlagOverwrite, "true"), // Overwrite genesis.json, in case it already exists
 	})
 
-	require.NoError(t, svrcmd.Execute(rootCmd, simapp.DefaultNodeHome))
+	require.NoError(t, svrcmd.Execute(rootCmd, "", simapp.DefaultNodeHome))
 }
diff --git a/simapp/simd/main.go b/simapp/simd/main.go
index 3e744360f..6ac86d18d 100644
--- a/simapp/simd/main.go
+++ b/simapp/simd/main.go
@@ -12,7 +12,7 @@ import (
 func main() {
 	rootCmd, _ := cmd.NewRootCmd()
 
-	if err := svrcmd.Execute(rootCmd, simapp.DefaultNodeHome); err != nil {
+	if err := svrcmd.Execute(rootCmd, "", simapp.DefaultNodeHome); err != nil {
 		switch e := err.(type) {
 		case server.ErrorCode:
 			os.Exit(e.Code)
-- 
2.30.2

