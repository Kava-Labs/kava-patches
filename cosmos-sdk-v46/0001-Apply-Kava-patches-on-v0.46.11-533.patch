From 2f4426d82fd722eae28f77c8b5ae3e0886f9c8d2 Mon Sep 17 00:00:00 2001
From: drklee3 <github@dlee.dev>
Date: Thu, 30 Mar 2023 10:40:44 -0700
Subject: [PATCH 1/2] Apply Kava patches on v0.46.11 (#533)

* Apply Kava patch 3

* Apply Kava patch 4

* Update default tally_handler to match upstream
---
 x/bank/keeper/keeper.go         |  18 ++++
 x/gov/keeper/keeper.go          |   8 ++
 x/gov/keeper/tally.go           | 115 +------------------------
 x/gov/keeper/tally_handler.go   | 143 ++++++++++++++++++++++++++++++++
 x/gov/keeper/vote.go            |   4 +-
 x/gov/types/v1/tally_handler.go |  10 +++
 6 files changed, 185 insertions(+), 113 deletions(-)
 create mode 100644 x/gov/keeper/tally_handler.go
 create mode 100644 x/gov/types/v1/tally_handler.go

diff --git a/x/bank/keeper/keeper.go b/x/bank/keeper/keeper.go
index 32591fb12..9a96acf08 100644
--- a/x/bank/keeper/keeper.go
+++ b/x/bank/keeper/keeper.go
@@ -182,6 +182,15 @@ func (k BaseKeeper) DelegateCoins(ctx sdk.Context, delegatorAddr, moduleAccAddr
 		return err
 	}
 
+	ctx.EventManager().EmitEvent(
+		sdk.NewEvent(
+			types.EventTypeTransfer,
+			sdk.NewAttribute(types.AttributeKeyRecipient, moduleAccAddr.String()),
+			sdk.NewAttribute(types.AttributeKeySender, delegatorAddr.String()),
+			sdk.NewAttribute(sdk.AttributeKeyAmount, amt.String()),
+		),
+	)
+
 	return nil
 }
 
@@ -214,6 +223,15 @@ func (k BaseKeeper) UndelegateCoins(ctx sdk.Context, moduleAccAddr, delegatorAdd
 		return err
 	}
 
+	ctx.EventManager().EmitEvent(
+		sdk.NewEvent(
+			types.EventTypeTransfer,
+			sdk.NewAttribute(types.AttributeKeyRecipient, delegatorAddr.String()),
+			sdk.NewAttribute(types.AttributeKeySender, moduleAccAddr.String()),
+			sdk.NewAttribute(sdk.AttributeKeyAmount, amt.String()),
+		),
+	)
+
 	return nil
 }
 
diff --git a/x/gov/keeper/keeper.go b/x/gov/keeper/keeper.go
index 4558075f4..27ac8c9d1 100644
--- a/x/gov/keeper/keeper.go
+++ b/x/gov/keeper/keeper.go
@@ -42,6 +42,9 @@ type Keeper struct {
 	// Msg server router
 	router *baseapp.MsgServiceRouter
 
+	// Tally handler for tallying votes. If not provided, the default one will be used.
+	tallyHandler v1.TallyHandler
+
 	config types.Config
 }
 
@@ -97,6 +100,11 @@ func (keeper *Keeper) SetHooks(gh types.GovHooks) *Keeper {
 	return keeper
 }
 
+func (keeper *Keeper) SetTallyHandler(th v1.TallyHandler) *Keeper {
+	keeper.tallyHandler = th
+	return keeper
+}
+
 // Logger returns a module-specific logger.
 func (keeper Keeper) Logger(ctx sdk.Context) log.Logger {
 	return ctx.Logger().With("module", "x/"+types.ModuleName)
diff --git a/x/gov/keeper/tally.go b/x/gov/keeper/tally.go
index 5959989b2..3c2914d0f 100644
--- a/x/gov/keeper/tally.go
+++ b/x/gov/keeper/tally.go
@@ -3,7 +3,6 @@ package keeper
 import (
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	v1 "github.com/cosmos/cosmos-sdk/x/gov/types/v1"
-	stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"
 )
 
 // TODO: Break into several smaller functions for clarity
@@ -11,116 +10,10 @@ import (
 // Tally iterates over the votes and updates the tally of a proposal based on the voting power of the
 // voters
 func (keeper Keeper) Tally(ctx sdk.Context, proposal v1.Proposal) (passes bool, burnDeposits bool, tallyResults v1.TallyResult) {
-	results := make(map[v1.VoteOption]sdk.Dec)
-	results[v1.OptionYes] = sdk.ZeroDec()
-	results[v1.OptionAbstain] = sdk.ZeroDec()
-	results[v1.OptionNo] = sdk.ZeroDec()
-	results[v1.OptionNoWithVeto] = sdk.ZeroDec()
-
-	totalVotingPower := sdk.ZeroDec()
-	currValidators := make(map[string]v1.ValidatorGovInfo)
-
-	// fetch all the bonded validators, insert them into currValidators
-	keeper.sk.IterateBondedValidatorsByPower(ctx, func(index int64, validator stakingtypes.ValidatorI) (stop bool) {
-		currValidators[validator.GetOperator().String()] = v1.NewValidatorGovInfo(
-			validator.GetOperator(),
-			validator.GetBondedTokens(),
-			validator.GetDelegatorShares(),
-			sdk.ZeroDec(),
-			v1.WeightedVoteOptions{},
-		)
-
-		return false
-	})
-
-	keeper.IterateVotes(ctx, proposal.Id, func(vote v1.Vote) bool {
-		// if validator, just record it in the map
-		voter := sdk.MustAccAddressFromBech32(vote.Voter)
-
-		valAddrStr := sdk.ValAddress(voter.Bytes()).String()
-		if val, ok := currValidators[valAddrStr]; ok {
-			val.Vote = vote.Options
-			currValidators[valAddrStr] = val
-		}
-
-		// iterate over all delegations from voter, deduct from any delegated-to validators
-		keeper.sk.IterateDelegations(ctx, voter, func(index int64, delegation stakingtypes.DelegationI) (stop bool) {
-			valAddrStr := delegation.GetValidatorAddr().String()
-
-			if val, ok := currValidators[valAddrStr]; ok {
-				// There is no need to handle the special case that validator address equal to voter address.
-				// Because voter's voting power will tally again even if there will be deduction of voter's voting power from validator.
-				val.DelegatorDeductions = val.DelegatorDeductions.Add(delegation.GetShares())
-				currValidators[valAddrStr] = val
-
-				// delegation shares * bonded / total shares
-				votingPower := delegation.GetShares().MulInt(val.BondedTokens).Quo(val.DelegatorShares)
-
-				for _, option := range vote.Options {
-					weight, _ := sdk.NewDecFromStr(option.Weight)
-					subPower := votingPower.Mul(weight)
-					results[option.Option] = results[option.Option].Add(subPower)
-				}
-				totalVotingPower = totalVotingPower.Add(votingPower)
-			}
-
-			return false
-		})
-
-		keeper.deleteVote(ctx, vote.ProposalId, voter)
-		return false
-	})
-
-	// iterate over the validators again to tally their voting power
-	for _, val := range currValidators {
-		if len(val.Vote) == 0 {
-			continue
-		}
-
-		sharesAfterDeductions := val.DelegatorShares.Sub(val.DelegatorDeductions)
-		votingPower := sharesAfterDeductions.MulInt(val.BondedTokens).Quo(val.DelegatorShares)
-
-		for _, option := range val.Vote {
-			weight, _ := sdk.NewDecFromStr(option.Weight)
-			subPower := votingPower.Mul(weight)
-			results[option.Option] = results[option.Option].Add(subPower)
-		}
-		totalVotingPower = totalVotingPower.Add(votingPower)
-	}
-
-	tallyParams := keeper.GetTallyParams(ctx)
-	tallyResults = v1.NewTallyResultFromMap(results)
-
-	// TODO: Upgrade the spec to cover all of these cases & remove pseudocode.
-	// If there is no staked coins, the proposal fails
-	if keeper.sk.TotalBondedTokens(ctx).IsZero() {
-		return false, false, tallyResults
-	}
-
-	// If there is not enough quorum of votes, the proposal fails
-	percentVoting := totalVotingPower.Quo(sdk.NewDecFromInt(keeper.sk.TotalBondedTokens(ctx)))
-	quorum, _ := sdk.NewDecFromStr(tallyParams.Quorum)
-	if percentVoting.LT(quorum) {
-		return false, false, tallyResults
-	}
-
-	// If no one votes (everyone abstains), proposal fails
-	if totalVotingPower.Sub(results[v1.OptionAbstain]).Equal(sdk.ZeroDec()) {
-		return false, false, tallyResults
-	}
-
-	// If more than 1/3 of voters veto, proposal fails
-	vetoThreshold, _ := sdk.NewDecFromStr(tallyParams.VetoThreshold)
-	if results[v1.OptionNoWithVeto].Quo(totalVotingPower).GT(vetoThreshold) {
-		return false, true, tallyResults
-	}
-
-	// If more than 1/2 of non-abstaining voters vote Yes, proposal passes
-	threshold, _ := sdk.NewDecFromStr(tallyParams.Threshold)
-	if results[v1.OptionYes].Quo(totalVotingPower.Sub(results[v1.OptionAbstain])).GT(threshold) {
-		return true, false, tallyResults
+	tallyHandler := keeper.tallyHandler
+	if tallyHandler == nil {
+		tallyHandler = NewDefaultTallyHandler(keeper)
 	}
 
-	// If more than 1/2 of non-abstaining voters vote No, proposal fails
-	return false, false, tallyResults
+	return tallyHandler.Tally(ctx, proposal)
 }
diff --git a/x/gov/keeper/tally_handler.go b/x/gov/keeper/tally_handler.go
new file mode 100644
index 000000000..c921125ac
--- /dev/null
+++ b/x/gov/keeper/tally_handler.go
@@ -0,0 +1,143 @@
+package keeper
+
+import (
+	sdk "github.com/cosmos/cosmos-sdk/types"
+	v1 "github.com/cosmos/cosmos-sdk/x/gov/types/v1"
+	stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"
+)
+
+var _ v1.TallyHandler = DefaultTallyHandler{}
+
+// DefaultTallyHandler is the default tally handler for x/gov
+type DefaultTallyHandler struct {
+	keeper Keeper
+}
+
+// NewDefaultTallyHandler creates a new tally handler.
+func NewDefaultTallyHandler(k Keeper) DefaultTallyHandler {
+	return DefaultTallyHandler{
+		keeper: k,
+	}
+}
+
+// TODO: Break Tally into several smaller functions for clarity
+
+// Tally iterates over the votes and updates the tally of a proposal based on the voting power of the
+// voters
+func (dth DefaultTallyHandler) Tally(
+	ctx sdk.Context,
+	proposal v1.Proposal,
+) (passes bool, burnDeposits bool, tallyResults v1.TallyResult) {
+	results := make(map[v1.VoteOption]sdk.Dec)
+	results[v1.OptionYes] = sdk.ZeroDec()
+	results[v1.OptionAbstain] = sdk.ZeroDec()
+	results[v1.OptionNo] = sdk.ZeroDec()
+	results[v1.OptionNoWithVeto] = sdk.ZeroDec()
+
+	totalVotingPower := sdk.ZeroDec()
+	currValidators := make(map[string]v1.ValidatorGovInfo)
+
+	// fetch all the bonded validators, insert them into currValidators
+	dth.keeper.sk.IterateBondedValidatorsByPower(ctx, func(index int64, validator stakingtypes.ValidatorI) (stop bool) {
+		currValidators[validator.GetOperator().String()] = v1.NewValidatorGovInfo(
+			validator.GetOperator(),
+			validator.GetBondedTokens(),
+			validator.GetDelegatorShares(),
+			sdk.ZeroDec(),
+			v1.WeightedVoteOptions{},
+		)
+
+		return false
+	})
+
+	dth.keeper.IterateVotes(ctx, proposal.Id, func(vote v1.Vote) bool {
+		// if validator, just record it in the map
+		voter := sdk.MustAccAddressFromBech32(vote.Voter)
+
+		valAddrStr := sdk.ValAddress(voter.Bytes()).String()
+		if val, ok := currValidators[valAddrStr]; ok {
+			val.Vote = vote.Options
+			currValidators[valAddrStr] = val
+		}
+
+		// iterate over all delegations from voter, deduct from any delegated-to validators
+		dth.keeper.sk.IterateDelegations(ctx, voter, func(index int64, delegation stakingtypes.DelegationI) (stop bool) {
+			valAddrStr := delegation.GetValidatorAddr().String()
+
+			if val, ok := currValidators[valAddrStr]; ok {
+				// There is no need to handle the special case that validator address equal to voter address.
+				// Because voter's voting power will tally again even if there will be deduction of voter's voting power from validator.
+				val.DelegatorDeductions = val.DelegatorDeductions.Add(delegation.GetShares())
+				currValidators[valAddrStr] = val
+
+				// delegation shares * bonded / total shares
+				votingPower := delegation.GetShares().MulInt(val.BondedTokens).Quo(val.DelegatorShares)
+
+				for _, option := range vote.Options {
+					weight, _ := sdk.NewDecFromStr(option.Weight)
+					subPower := votingPower.Mul(weight)
+					results[option.Option] = results[option.Option].Add(subPower)
+				}
+				totalVotingPower = totalVotingPower.Add(votingPower)
+			}
+
+			return false
+		})
+
+		dth.keeper.DeleteVote(ctx, vote.ProposalId, voter)
+		return false
+	})
+
+	// iterate over the validators again to tally their voting power
+	for _, val := range currValidators {
+		if len(val.Vote) == 0 {
+			continue
+		}
+
+		sharesAfterDeductions := val.DelegatorShares.Sub(val.DelegatorDeductions)
+		votingPower := sharesAfterDeductions.MulInt(val.BondedTokens).Quo(val.DelegatorShares)
+
+		for _, option := range val.Vote {
+			weight, _ := sdk.NewDecFromStr(option.Weight)
+			subPower := votingPower.Mul(weight)
+			results[option.Option] = results[option.Option].Add(subPower)
+		}
+		totalVotingPower = totalVotingPower.Add(votingPower)
+	}
+
+	tallyParams := dth.keeper.GetTallyParams(ctx)
+	tallyResults = v1.NewTallyResultFromMap(results)
+
+	// TODO: Upgrade the spec to cover all of these cases & remove pseudocode.
+	// If there is no staked coins, the proposal fails
+	if dth.keeper.sk.TotalBondedTokens(ctx).IsZero() {
+		return false, false, tallyResults
+	}
+
+	// If there is not enough quorum of votes, the proposal fails
+	percentVoting := totalVotingPower.Quo(sdk.NewDecFromInt(dth.keeper.sk.TotalBondedTokens(ctx)))
+	quorum, _ := sdk.NewDecFromStr(tallyParams.Quorum)
+	if percentVoting.LT(quorum) {
+		return false, false, tallyResults
+	}
+
+	// If no one votes (everyone abstains), proposal fails
+	if totalVotingPower.Sub(results[v1.OptionAbstain]).Equal(sdk.ZeroDec()) {
+		return false, false, tallyResults
+	}
+
+	// If more than 1/3 of voters veto, proposal fails
+	vetoThreshold, _ := sdk.NewDecFromStr(tallyParams.VetoThreshold)
+	if results[v1.OptionNoWithVeto].Quo(totalVotingPower).GT(vetoThreshold) {
+		return false, true, tallyResults
+	}
+
+	// If more than 1/2 of non-abstaining voters vote Yes, proposal passes
+	threshold, _ := sdk.NewDecFromStr(tallyParams.Threshold)
+	if results[v1.OptionYes].Quo(totalVotingPower.Sub(results[v1.OptionAbstain])).GT(threshold) {
+		return true, false, tallyResults
+	}
+
+	// If more than 1/2 of non-abstaining voters vote No, proposal fails
+	return false, false, tallyResults
+}
diff --git a/x/gov/keeper/vote.go b/x/gov/keeper/vote.go
index 4e2436ff8..ebf72332e 100644
--- a/x/gov/keeper/vote.go
+++ b/x/gov/keeper/vote.go
@@ -118,8 +118,8 @@ func (keeper Keeper) IterateVotes(ctx sdk.Context, proposalID uint64, cb func(vo
 	}
 }
 
-// deleteVote deletes a vote from a given proposalID and voter from the store
-func (keeper Keeper) deleteVote(ctx sdk.Context, proposalID uint64, voterAddr sdk.AccAddress) {
+// DeleteVote deletes a vote from a given proposalID and voter from the store
+func (keeper Keeper) DeleteVote(ctx sdk.Context, proposalID uint64, voterAddr sdk.AccAddress) {
 	store := ctx.KVStore(keeper.storeKey)
 	store.Delete(types.VoteKey(proposalID, voterAddr))
 }
diff --git a/x/gov/types/v1/tally_handler.go b/x/gov/types/v1/tally_handler.go
new file mode 100644
index 000000000..5c49fe9ee
--- /dev/null
+++ b/x/gov/types/v1/tally_handler.go
@@ -0,0 +1,10 @@
+package v1
+
+import (
+	sdk "github.com/cosmos/cosmos-sdk/types"
+)
+
+// TallyHandler is the interface that is used for tallying votes.
+type TallyHandler interface {
+	Tally(sdk.Context, Proposal) (passes bool, burnDeposits bool, tallyResults TallyResult)
+}
-- 
2.39.2 (Apple Git-143)

